//
//  ViewController.swift
//  Expandable
//
//  Created by Gabriel Theodoropoulos on 28/10/15.
//  Copyright Â© 2015 Appcoda. All rights reserved.
//

import UIKit

class MasterViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    
    // MARK: IBOutlet Properties
    
    @IBOutlet weak var tblExpandable: UITableView!
    
    // MARK: Variables
    
    var cellDescriptors = [[Cell]]()
    var visibleRowsPerSection = [[Int]]()
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        splitViewController!.preferredDisplayMode = UISplitViewControllerDisplayMode.AllVisible
    }
    
    
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        
        configureTableView()
        
        loadCellDescriptors()
        print(cellDescriptors)
    }
    
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    
    // MARK: Custom Functions
    
    func configureTableView() {
        tblExpandable.delegate = self
        tblExpandable.dataSource = self
        tblExpandable.tableFooterView = UIView(frame: CGRectZero)
    }
    
    
    
    func loadCellDescriptors() {
        
        var localCellDescriptors: [Cell] = []
        
        for i in 1...10 {
            let cell = Cell(isExpandable: true, isExpanded: false, isVisible: true, value: "", primaryTitle: "", secondaryTitle: "HIIII", cellIdentifier: "idCellNormal", additionalRows: 2)
            print(i)
            localCellDescriptors.append(cell)
        }
        
        cellDescriptors.append(localCellDescriptors)
        getIndicesOfVisibleRows()
        tblExpandable.reloadData()
        
        
        print(localCellDescriptors)
                
    }
    
    
    
    func getIndicesOfVisibleRows() {
        visibleRowsPerSection.removeAll()
        
        
        for currentSectionCells in cellDescriptors {
            var visibleRows = [Int]()
            
            for row in 0...((currentSectionCells).count - 1) {
                if currentSectionCells[row].isVisible == true {
                    visibleRows.append(row)
                }
            }
            
            visibleRowsPerSection.append(visibleRows)
        }
    }
    
    
    
    func getCellDescriptorForIndexPath(indexPath: NSIndexPath) -> Cell {
        let indexOfVisibleRow = visibleRowsPerSection[indexPath.section][indexPath.row]
        let cellDescriptor = cellDescriptors[indexPath.section][indexOfVisibleRow]
        return cellDescriptor
    }
    
    
    
    // MARK: UITableView Delegate and Datasource Functions
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return visibleRowsPerSection[section].count
    }
    
    
    
    func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        switch section {
        case 0:
            return "Manual 1"
            
        case 1:
            return "Manual 2"
            
        default:
            return "Manual 3"
        }
    }
    
    
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)
        let cell = tableView.dequeueReusableCellWithIdentifier(currentCellDescriptor.cellIdentifier, forIndexPath: indexPath) as UITableViewCell
        
       // tblExpandable = UIColor.redColor()
            
            if currentCellDescriptor.cellIdentifier == "idCellNormal" {
                if let primaryTitle = currentCellDescriptor.primaryTitle as? String {
                    
                  
                    let textLabel = cell.viewWithTag(1) as? UILabel
                    textLabel?.text = primaryTitle
                    
                 
                }
                
                if let secondaryTitle = currentCellDescriptor.secondaryTitle as? String {
                    print(secondaryTitle)
                    
                    let detailTextLabel = cell.viewWithTag(2) as? UILabel
                    detailTextLabel?.text = secondaryTitle
                    
                }
            }
        
        
        return cell
    }
    
    
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
            let indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]
        
        if cellDescriptors[indexPath.section][indexOfTappedRow].isExpandable == true {
            var shouldExpandAndShowSubRows = false
            if cellDescriptors[indexPath.section][indexOfTappedRow].isExpanded == false {
                shouldExpandAndShowSubRows = true
            }
            
            var cell = cellDescriptors[indexPath.section][indexOfTappedRow] //.setValue(shouldExpandAndShowSubRows, forKey: "isExpanded")
            cell.isExpanded = shouldExpandAndShowSubRows
            
            for i in (indexOfTappedRow + 1)...(indexOfTappedRow + (cellDescriptors[indexPath.section][indexOfTappedRow].additionalRows)) {
                var cell = cellDescriptors[indexPath.section][i]   //.setValue(shouldExpandAndShowSubRows, forKey: "isVisible")
                cell.isVisible = shouldExpandAndShowSubRows
            }
        }
        
        getIndicesOfVisibleRows()
        tblExpandable.reloadSections(NSIndexSet(index: indexPath.section), withRowAnimation: UITableViewRowAnimation.Fade)
    }
    
    
    
    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        let currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)
        
        switch currentCellDescriptor.cellIdentifier {
        case "idCellNormal":
            return 60.0
            
            //        case "idCellDatePicker":
            //            return 270.0
            
        default:
            return 44.0
        }
    }
    
    
    
        func numberOfSectionsInTableView(tableView: UITableView) -> Int {
            if cellDescriptors.isEmpty {
                return 0
            }
            else {
                return cellDescriptors.count
            }
        }
    
    
    
    // MARK: Segue Back
    
    @IBAction func bk(sender: AnyObject) {
        self.dismissViewControllerAnimated(true, completion: {});
    }
    
}
