//
//  ViewController.swift
//  Expandable
//
//  Created by Gabriel Theodoropoulos on 28/10/15.
//  Copyright Â© 2015 Appcoda. All rights reserved.
//

import UIKit

class MasterViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    
    // MARK: IBOutlet Properties
    
    @IBOutlet weak var tblExpandable: UITableView!
    
    // MARK: Variables
    
    var cellDescriptors = [[Cell]]()
    var visibleRowsPerSection = [[Int]]()
    
    var count: Int = 0
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        splitViewController!.preferredDisplayMode = UISplitViewControllerDisplayMode.AllVisible
    }
    
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        configureTableView()
        loadCellDescriptors()
        print(cellDescriptors)
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    
    // MARK: Custom Functions
    
    func configureTableView() {
        tblExpandable.delegate = self
        tblExpandable.dataSource = self
        tblExpandable.tableFooterView = UIView(frame: CGRectZero)
    }
    
    
    func loadCellDescriptors() {
        
        
        // When we get the data, we need to check how many cells we will need for Chapters, Sections, Tasks, Sub-Tasks, etc
        // And create those cell instances according
        
        var localCellDescriptors: [Cell] = []
        
        // Example
        let manual = (chapters: 10, sections: 5, tasks: 5)
        let additionalRows = (chapterRows: 25, sectionRows: 5)
        
        // Dictionary - e.g. = key will be "chapters" value: array of Int additional rows per chapters
        
        
        
        for i in 1...manual.chapters {
            
            
            // Values that need to be dynmaic
            // additionalRows
            // Both Title
            // isExpandable
            // isExpanded
            // isVisible
            
            // Just making Chapters unique for now by adding an index
            if count < manual.chapters {
                self.count += 1
            }
            
            let cell = Cell(isExpandable: true, isExpanded: false, isVisible: true, value: "", primaryTitle: "", secondaryTitle: "Chapters", cellIdentifier: "idCellNormal", additionalRows: additionalRows.chapterRows)
            print(i)
            localCellDescriptors.append(cell)
            
            // Still needs more work ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
            
            // Check Sections
            if (manual.sections > 0){
                for iTwo in 1...manual.sections {
                    let cellTwo = Cell(isExpandable: false, isExpanded: false, isVisible: false, value: "", primaryTitle: "Sections", secondaryTitle: "", cellIdentifier: "idCellNormal", additionalRows: additionalRows.sectionRows)
                    localCellDescriptors.append(cellTwo)
                    print(iTwo)
                    
                    // Check Task
                    if (manual.tasks > 0){
                        for iThree in 1...manual.tasks {
                            let cellThree = Cell(isExpandable: false, isExpanded: false, isVisible: false, value: "", primaryTitle: "Tasks", secondaryTitle: "", cellIdentifier: "idCellNormal", additionalRows: 0)
                            localCellDescriptors.append(cellThree)
                            print(iThree)
                        }
                    } //
                }
            }
            
            
            // Still needs more work **************************************************************************************
        }
        
        cellDescriptors.append(localCellDescriptors)
        getIndicesOfVisibleRows()
        tblExpandable.reloadData()
        
        print(localCellDescriptors)
        
    }
    
    
    func getIndicesOfVisibleRows() {
        visibleRowsPerSection.removeAll()
        
        for currentSectionCells in cellDescriptors {
            var visibleRows = [Int]()
            
            for row in 0...((currentSectionCells).count - 1) {
                if currentSectionCells[row].isVisible == true {
                    visibleRows.append(row)
                }
            }
            
            visibleRowsPerSection.append(visibleRows)
        }
    }
    
    
    func getCellDescriptorForIndexPath(indexPath: NSIndexPath) -> Cell {
        let indexOfVisibleRow = visibleRowsPerSection[indexPath.section][indexPath.row]
        let cellDescriptor = cellDescriptors[indexPath.section][indexOfVisibleRow]
        return cellDescriptor
    }
    
    
    // MARK: UITableView Delegate and Datasource Functions
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return visibleRowsPerSection[section].count
    }
    
    
    func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        switch section {
        case 0:
            return "Manual 1"
            
        case 1:
            return "Manual 2"
            
        default:
            return "Manual 3"
        }
    }
    
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)
        let cell = tableView.dequeueReusableCellWithIdentifier(currentCellDescriptor.cellIdentifier, forIndexPath: indexPath) as UITableViewCell
            
            if currentCellDescriptor.cellIdentifier == "idCellNormal" {
                if let primaryTitle = currentCellDescriptor.primaryTitle as String? {
                    
                    let textLabel = cell.viewWithTag(1) as? UILabel
                    textLabel?.text = primaryTitle
                }
                
                if let secondaryTitle = currentCellDescriptor.secondaryTitle as String? {
                    print(secondaryTitle)
                    
                    let detailTextLabel = cell.viewWithTag(2) as? UILabel
                    detailTextLabel?.text = secondaryTitle
                }
            }
        
        return cell
    }
    
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        let indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]
        
        var tappedCell = (chapterSelected: false, sectionSelected: false, taskSelected: false)
        
        
        // Check what cell was SELECTED Chapters, Sections, Task
        if cellDescriptors[indexPath.section][indexOfTappedRow].secondaryTitle == "Chapters" {
            tappedCell.chapterSelected = true
            print(tappedCell.chapterSelected)
        } else if cellDescriptors[indexPath.section][indexOfTappedRow].primaryTitle == "Sections" {
            tappedCell.sectionSelected = true
        } else if cellDescriptors[indexPath.section][indexOfTappedRow].primaryTitle == "Tasks"  {
            tappedCell.taskSelected = true
        }
        
        // If the cells property isExpandable is set to true
        if cellDescriptors[indexPath.section][indexOfTappedRow].isExpandable == true {
            var shouldExpandAndShowSubRows = false
            if cellDescriptors[indexPath.section][indexOfTappedRow].isExpanded == false {
                shouldExpandAndShowSubRows = true
            }
            
            let cell = cellDescriptors[indexPath.section][indexOfTappedRow]
            cell.isExpanded = shouldExpandAndShowSubRows
            
            if cell.additionalRows > 0 {
                for i in (indexOfTappedRow + 1)...(indexOfTappedRow + (cellDescriptors[indexPath.section][indexOfTappedRow].additionalRows)) {
                    let cell = cellDescriptors[indexPath.section][i]
                    
                    print(tappedCell.chapterSelected)
                    
                    if tappedCell.chapterSelected == true {
                        
                        if  cell.primaryTitle == "Sections" {
                            cell.isExpandable = shouldExpandAndShowSubRows
                            cell.isVisible = shouldExpandAndShowSubRows
                        } else {
                            cell.isExpandable = false
                            cell.isVisible = false
                        }
                        
                    }
                    
                    if tappedCell.sectionSelected == true {
                        
                        if  cell.primaryTitle == "Tasks" {
                            cell.isExpandable = shouldExpandAndShowSubRows
                            cell.isVisible = shouldExpandAndShowSubRows
                        } else {
                            cell.isExpandable = false
                            cell.isVisible = false
                        }
                        
                    }
                    

                    
                    
                    print(i)
                    print(cell.isExpandable)
                    print(cell.isVisible)
                }
            }
            print("Check: \(cell.isExpanded)")
        }
        
        getIndicesOfVisibleRows()
        tblExpandable.reloadSections(NSIndexSet(index: indexPath.section), withRowAnimation: UITableViewRowAnimation.Fade)
    }
    
    
    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        let currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)
        
        switch currentCellDescriptor.cellIdentifier {
        case "idCellNormal":
            return 60.0
            
            //        case "":
            //            return 270.0
            
        default:
            return 44.0
        }
    }
    
    
    
    func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        if cellDescriptors.isEmpty {
            return 0
        } else {
            return cellDescriptors.count
        }
    }
    
    // MARK: Segue Back
    
    @IBAction func bk(sender: AnyObject) {
        self.dismissViewControllerAnimated(true, completion: {});
    }
    
    // MARK: Reload
    
    @IBAction func reload(sender: AnyObject) {
        
        for currentSectionCells in cellDescriptors {
            
            for i in currentSectionCells {
                if i.primaryTitle == "Sections" || i.primaryTitle == "Tasks" {
                    i.isVisible = false
                }
            }

            
        }

        cellDescriptors.removeAll()
        
        UIView.animateWithDuration(1.4, animations: {
            self.loadCellDescriptors()
        })
        
        
    }
    
    
}
