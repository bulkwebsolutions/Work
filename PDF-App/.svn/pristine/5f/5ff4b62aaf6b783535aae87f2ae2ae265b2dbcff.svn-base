//
//  ViewController.swift
//  Expandable
//
//  Created by Gabriel Theodoropoulos on 28/10/15.
//  Copyright Â© 2015 Appcoda. All rights reserved.
//

import UIKit

class MasterViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    
    // MARK: IBOutlet Properties
    
    @IBOutlet weak var tblExpandable: UITableView!
    
    
    // MARK: Variables
    
    var cellDescriptors: NSMutableArray!
    var visibleRowsPerSection = [[Int]]()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        
        
        
    }
    
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        
        
        
        configureTableView()
        
        loadCellDescriptors()
        print(cellDescriptors)
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    // MARK: Custom Functions
    
    func configureTableView() {
        tblExpandable.delegate = self
        tblExpandable.dataSource = self
        tblExpandable.tableFooterView = UIView(frame: CGRectZero)
        
        tblExpandable.registerNib(UINib(nibName: "NormalCell", bundle: nil), forCellReuseIdentifier: "idCellNormal")
    }
    
    
    func loadCellDescriptors() {
        if let path = NSBundle.mainBundle().pathForResource("CellDescriptor", ofType: "plist") {
            cellDescriptors = NSMutableArray(contentsOfFile: path)
            getIndicesOfVisibleRows()
            tblExpandable.reloadData()
        }
    }
    
    
    func getIndicesOfVisibleRows() {
        visibleRowsPerSection.removeAll()
        
        for currentSectionCells in cellDescriptors {
            var visibleRows = [Int]()
            
            for row in 0...((currentSectionCells as! [[String: AnyObject]]).count - 1) {
                if currentSectionCells[row]["isVisible"] as! Bool == true {
                    visibleRows.append(row)
                }
            }
            
            visibleRowsPerSection.append(visibleRows)
        }
    }
    
    
    func getCellDescriptorForIndexPath(indexPath: NSIndexPath) -> [String: AnyObject] {
        let indexOfVisibleRow = visibleRowsPerSection[indexPath.section][indexPath.row]
        let cellDescriptor = cellDescriptors[indexPath.section][indexOfVisibleRow] as! [String: AnyObject]
        return cellDescriptor
    }
    
    
    // MARK: UITableView Delegate and Datasource Functions
    
//    func numberOfSectionsInTableView(tableView: UITableView) -> Int {
//        if cellDescriptors != nil {
//            return cellDescriptors.count
//        }
//        else {
//            return 0
//        }
//    }
    
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return visibleRowsPerSection.count
    }
    
    
    func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        switch section {
        case 0:
            return "Chapters"
            
        case 1:
            return "Sections"
            
        default:
            return "Topics"
        }
    }
    
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)
        let cell = tableView.dequeueReusableCellWithIdentifier(currentCellDescriptor["cellIdentifier"] as! String, forIndexPath: indexPath) as! CustomCell
        
       // tblExpandable = UIColor.redColor()
        
        if currentCellDescriptor["cellIdentifier"] as! String == "idCellNormal" {
            if let primaryTitle = currentCellDescriptor["primaryTitle"] {
                
                print(primaryTitle)
                
                cell.textLabel?.text = primaryTitle as? String
            }
            
            if let secondaryTitle = currentCellDescriptor["secondaryTitle"] {
                
                print(secondaryTitle)
                
                cell.detailTextLabel?.text = secondaryTitle as? String
                
              //  cell.textLabel?.text = secondaryTitle as? String
                
                
            }
            
       }
        
        return cell
    }
    
    
    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        let currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)
        
        switch currentCellDescriptor["cellIdentifier"] as! String {
        case "idCellNormal":
            return 60.0
            
//        case "idCellDatePicker":
//            return 270.0
            
        default:
            return 44.0
        }
    }
    
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        print(cellDescriptors[2])
        
       // let indexOfTappedRow = visibleRowsPerSection[indexPath.row]
        
        if cellDescriptors[0][indexPath.row]["isExpandable"] as! Bool == true {
            var shouldExpandAndShowSubRows = false
            
            if cellDescriptors[0][indexPath.row]["isExpanded"] as! Bool == false {
                // In this case the cell should expand.
                shouldExpandAndShowSubRows = true
            }
            
            cellDescriptors[0][indexPath.row].setValue(shouldExpandAndShowSubRows, forKey: "isExpanded")
            
            for i in (indexPath.row + 1)...(indexPath.row + (cellDescriptors[0][indexPath.row]["additionalRows"] as! Int)) {
                cellDescriptors[0][i].setValue(shouldExpandAndShowSubRows, forKey: "isVisible")
            }
        }
        
        
//        if cellDescriptors[indexPath.section][indexOfTappedRow]["isExpandable"] as! Bool == true {
//            var shouldExpandAndShowSubRows = false
//            
//            if cellDescriptors[indexPath.section][indexOfTappedRow]["isExpanded"] as! Bool == false {
//                // In this case the cell should expand.
//                shouldExpandAndShowSubRows = true
//            }
//            
//            cellDescriptors[indexPath.section][indexOfTappedRow].setValue(shouldExpandAndShowSubRows, forKey: "isExpanded")
//            
//            for i in (indexOfTappedRow + 1)...(indexOfTappedRow + (cellDescriptors[indexPath.section][indexOfTappedRow]["additionalRows"] as! Int)) {
//                cellDescriptors[indexPath.section][i].setValue(shouldExpandAndShowSubRows, forKey: "isVisible")
//            }
//        }
        
        
        
//        else {
//            if cellDescriptors[indexPath.section][indexOfTappedRow]["cellIdentifier"] as! String == "idCellValuePicker" {
//                var indexOfParentCell: Int!
//                
//                for var i=indexOfTappedRow - 1; i>=0; --i {
//                    if cellDescriptors[indexPath.section][i]["isExpandable"] as! Bool == true {
//                        indexOfParentCell = i
//                        break
//                    }
//                }
//                
//                cellDescriptors[indexPath.section][indexOfParentCell].setValue((tblExpandable.cellForRowAtIndexPath(indexPath) as! CustomCell).textLabel?.text, forKey: "primaryTitle")
//                cellDescriptors[indexPath.section][indexOfParentCell].setValue(false, forKey: "isExpanded")
//                
//                for i in (indexOfParentCell + 1)...(indexOfParentCell + (cellDescriptors[indexPath.section][indexOfParentCell]["additionalRows"] as! Int)) {
//                    cellDescriptors[indexPath.section][i].setValue(false, forKey: "isVisible")
//                }
//            }
//        }
        
        getIndicesOfVisibleRows()
        tblExpandable.reloadSections(NSIndexSet(index: indexPath.section), withRowAnimation: UITableViewRowAnimation.Fade)
    }
    
    @IBAction func back(sender: AnyObject) {
        self.dismissViewControllerAnimated(true, completion: {});
    }
    
}
