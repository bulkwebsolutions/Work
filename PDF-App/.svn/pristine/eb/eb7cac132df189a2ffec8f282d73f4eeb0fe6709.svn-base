//
//  ForgetPassword.swift
//  Task Control
//
//  Created by John Blaine on 1/8/16.
//  Copyright Â© 2016 Trax USA Corporation. All rights reserved.
//

import UIKit

class ForgetPassword: UIView, UITextFieldDelegate {
    typealias sentType = (emailAdr: String) -> Void
    typealias cancelType = (status: String) -> Void
    private var sentCB: sentType?
    private var cancelCB: cancelType?

    var message : UILabel!
    var username : UITextField!
    var log : UIButton!
    var cancel : UIButton!
    var vw : UIView!

    init(frm: CGRect, name : String) {
        
        super.init(frame: frm)
        
        self.accessibilityIdentifier = name

        let colorIndex :CGFloat = 220

        //message = UILabel(frame: CGRectZero, text : "Forget Password", adjustFont: 4.0 )
        message = UILabel(frame: CGRectZero )
        message.text = "Forget Password"
//        message.textColor = UIColor.redColor()
        message.textColor = UIColor(red: 0.180, green: 0.635, blue: 0.863, alpha: 1.0)
        message.textAlignment = NSTextAlignment.Center

        //username = UITextField(frame: CGRectZero, placeHolder: "email@host.com" )
        username = UITextField(frame: CGRectZero )
        username.placeholder = "email@host.com"
        username.backgroundColor = UIColor(red: colorIndex/255.0, green: colorIndex/255.0, blue: colorIndex/255.0, alpha: 1.0)
        username.layer.borderColor = UIColor(red: colorIndex/255.0, green: colorIndex/255.0, blue: colorIndex/255.0, alpha: 1.0).CGColor
        username.delegate = self

        
        log = UIButton(frame: CGRectZero )
        log.setTitle("Send", forState: UIControlState.Normal)
        log.addTarget(self, action: #selector(ForgetPassword.sentAction(_:)), forControlEvents: UIControlEvents.TouchUpInside)
//        log.backgroundColor = UIColor.redColor()
        log.backgroundColor = UIColor(red: 0.180, green: 0.635, blue: 0.863, alpha: 1.0)

        cancel = UIButton(frame: CGRectZero )
        cancel.setTitle("Cancel", forState: UIControlState.Normal)
        cancel.addTarget(self, action: #selector(ForgetPassword.cancelAction(_:)), forControlEvents: UIControlEvents.TouchUpInside)
//        cancel.backgroundColor = UIColor.redColor()
        cancel.backgroundColor = UIColor(red: 0.180, green: 0.635, blue: 0.863, alpha: 1.0)
        
        self.addSubview(message)
        self.addSubview(username)
        self.addSubview(log)
        self.addSubview(cancel)

        self.clipsToBounds = true
        self.layer.borderWidth = 1
//        self.layer.cornerRadius = self.frame.height * 0.08
        self.layer.cornerRadius = 20
        self.layer.borderColor = UIColor.clearColor().CGColor
        
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func drawRect( rect : CGRect ){
        let  w : CGFloat = self.bounds.size.width
        let  h : CGFloat = self.bounds.size.height

        let ctx : CGContextRef = UIGraphicsGetCurrentContext()!
                
        let colorIndex : CGFloat = 240
        let colorBack = UIColor(red: colorIndex/255.0, green: colorIndex/255.0, blue: colorIndex/255.0, alpha: 1.0).CGColor
//        let colorBack =  UIColor(red: 0.180, green: 0.635, blue: 0.863, alpha: 1.0).CGColor

        CGContextSetFillColorWithColor(ctx, colorBack );
        CGContextFillRect(ctx, CGRectMake(0, 0, w, h * 0.75) )
        
//        CGContextSetFillColorWithColor(ctx, UIColor.redColor().CGColor );
        CGContextSetFillColorWithColor(ctx, UIColor(red: 0.180, green: 0.635, blue: 0.863, alpha: 1.0).CGColor );
        CGContextFillRect(ctx, CGRectMake(0, h * 0.75, w, h * 0.25) )
    }

    override func layoutSubviews(){
        super.layoutSubviews()
        
        let  w : CGFloat = self.bounds.size.width
        let  h : CGFloat = self.bounds.size.height
        
        message.frame = CGRectMake( w * 0.1, h * 0.02, w * 0.8, h * 0.18)
        
        username.frame = CGRectMake( w * 0.1, h * 0.26, w * 0.8, h * 0.2)
        username.layer.sublayerTransform = CATransform3DMakeTranslation( w * 0.1, 0, 0);

        log.frame = CGRectMake( w * 0.1, h * 0.55, w * 0.3, h * 0.15)
        log.layer.cornerRadius = h * 0.05
        
        cancel.frame = CGRectMake( w * 0.6, h * 0.55, w * 0.3, h * 0.15)
        cancel.layer.cornerRadius = h * 0.05

    }
    
    
    func sentAction(sender: UIButton!) {
        let usr = username.text!
        self.sentCB!(emailAdr: usr)
    }
    
    func cancelAction(sender: UIButton!) {
        self.cancelCB!(status: "cancel" )
    }

    func run( txt : String, sent : (emailAdr : String) -> Void, cancel : (status: String) -> Void  ) {
        self.sentCB = sent
        self.cancelCB = cancel
    }
    
    
    func setAttribText( sysFontName : String, sysFontSize : CGFloat, leftText : String, middleText : String, rightText : String ) -> NSMutableAttributedString {
        let myString = String( format:"%@%@%@", leftText, middleText, rightText)
        var myMutableString = NSMutableAttributedString()
        
        myMutableString = NSMutableAttributedString(string: myString, attributes: [NSFontAttributeName:UIFont( name: sysFontName, size: sysFontSize - 6)!])
        myMutableString.addAttribute(NSFontAttributeName,
            value: UIFont( name: sysFontName, size: sysFontSize + 4)!,
            range: NSRange( location: leftText.lengthOfBytesUsingEncoding(NSUTF8StringEncoding), length: middleText.lengthOfBytesUsingEncoding(NSUTF8StringEncoding))
        )
        
        myMutableString.addAttribute(NSForegroundColorAttributeName,
            value: UIColor.whiteColor(),
            range: NSRange( location:0, length:myString.lengthOfBytesUsingEncoding(NSUTF8StringEncoding)))
        
        return( myMutableString )
    }
    
    func textFieldShouldBeginEditing(textField: UITextField) -> Bool {
        textField.autocorrectionType = UITextAutocorrectionType.No
        
            if (textField.respondsToSelector(Selector("inputAssistantItem"))) {
                textField.inputAssistantItem.leadingBarButtonGroups = []
                textField.inputAssistantItem.trailingBarButtonGroups = []
            }
        return true
    }
    
}
